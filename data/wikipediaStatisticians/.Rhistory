# load packages
library(rvest)
library(stringr)
library(ggmap)
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
cities <- html_text(anchors)
cities
cities <- str_trim(cities)
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities))
length(cities)
length(unique(cities))
?sort
sort(table(cities), decreasing = TRUE)[1:10]
library(rvest)
library(stringr)
library(ggmap)
## step 1: fetch list of cities with breweries
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
cities <- html_text(anchors)
cities
cities <- str_trim(cities)
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities), decreasing = TRUE)[1:10]
cities <- unique(cities)
length(cities)
sort(table(cities), decreasing = TRUE)[1:10]
## step 1: fetch list of cities with breweries
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
cities <- html_text(anchors)
cities
cities <- str_trim(cities)
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities), decreasing = TRUE)[1:10]
?geocode
pos <- geocode(unique(cities))
pos
View(pos)
warnings()
geocodeQueryCheck()
library(rvest)
library(stringr)
library(wordcloud)
url <- "http://www.nytimes.com"
html_parsed <- html(url, encoding = "UTF-8")
install.packages("wordcloud")
library(wordcloud)
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "story-heading", " " ))]' # use SelectorGadget to generate XPath expression
headings <- html_nodes(html_parsed, xpath = xpath)
headings <- html_text(headings)
headings
headings <- html_nodes(html_parsed, xpath = xpath) %>% html_text()
headings[1:10]
headings <- str_replace_all(headings, "\\n" , " ") %>% str_trim()
headings
wordcloud(headings)
?wordcloud
library(tidytext)
library(tidytext)
library(wordcloud)
?count
data("stop_words")
View(stop_words)
original_books <- austen_books()
unnest_tokens(headings)
headings()
?unnest_tokens
?wordcloud
data(crude)
install.packages("quanteda")
library(quanteda)
?textplot_wordcloud
tokens(headings)
?textplot_wordcloud
headings_tk <- tokens(headings)
textplot_wordcloud(headings_tk)
View(headings)
headings(headings)
View(stop_words)
?dfm
headings_dfm <- dfm(headings)
View(headings_dfm)
stopwords()
headings_dfm <- dfm(headings, remove = stopwords())
dim(headings_dfm)
textplot_wordcloud(headings_dfm)
headings_dfm <- dfm(headings, remove = stopwords(), remove_punkt = TRUE)
headings_dfm <- dfm(headings, remove = stopwords(), remove_punct = TRUE)
headings_dfm <- dfm(headings, remove = stopwords(), remove_punct = TRUE)
textplot_wordcloud(headings_dfm)
?textplot_wordcloud
1+2
1+2+
3
sum
1 + 2 - 3 +
# - R is 'case sensitve'
sum(1,2)
1 + 2 - 3 +
# - R is 'case sensitve'
sum(1,2)
Sum(1,2)
x <- log(10)
x
3,1415
mat <- matrix(c("this", "is", "a", "matrix"), nrow = 2, byrow = TRUE)
mat
mat[1,2]
mat[1,]
mat[,1]
mat <- matrix(c("this", "is", "a", "data frame"), nrow = 2, byrow = TRUE)
?read_csv
source("packages.r")
?read_csv
wage1 <- read_dta("../data/wage1.dta")
library(wooldridge)
install.packages("wooldridge")
library(wooldridge)
?wage1
summary(wage1)
str(wage1)
View(wage1)
hist(wage1$wage)
?hist
hist(wage1$wage)
hist(wage1$wage, freq = TRUE)
hist(wage1$wage, freq = FALSE)
wage1$wage
plot(wage1$educ, wage1$wage)
smoothingSpline = smooth.spline(wage1$educ, wage1$wage, spar = 0.3)
lines(smoothingSpline, col = "red")
model_out <- lm(wage ~ educ + female, data = wage1)
summary(model_out)
library(nycflights13)
?flights
View(flights)
head(flights)
nrow(flights)
table(flights$origin)
table(flights_sub$dest)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
table(flights_sub$dest)
flights_sub <- filter(flights, month == 1, day == 1, air_time > 60*7)
table(flights_sub$dest)
View(flights_sub)
?arrange
flights_sub <- arrange(flights, air_time, distance)
View(flights_sub)
flights_sub <- arrange(flights, desc(air_time), distance)
View(flights_sub)
flights_sub <-  select(flights, year, month, day)
head(flights_sub)
flights_sub <-  select(flights, -(dep_delay:time_hour))
head(flights_sub)
names(flights)
flights_sub <- rename(flights, tail_num = tailnum)
names(flights_sub)
flights_sub <- mutate(flights, gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
names(flights_sub)
View(flights_sub)
flights_by_origin <- group_by(flights, origin)
class(flights_by_origin)
summarize(flights_by_origin, n_deps = n())
summarize(flights_by_origin, dep_delay = mean(dep_delay, na.rm = TRUE))
## preparations -----------------------
source("packages.r")
# set temporary working directory
tempwd <- ("data/breweriesGermany")
dir.create(tempwd)
setwd(tempwd)
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
anchors
cities <- html_text(anchors)
cities
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities))
geocode("Berlin")
# geocoding takes a while -> save results in local cache file
# 2500 requests allowed per day
if ( !file.exists("breweries_geo.RData")){
pos <- geocode(cities)
geocodeQueryCheck()
save(pos, file="breweries_geo.RData")
} else {
load("breweries_geo.RData")
}
head(pos)
## step 3: plot breweries of Germany
brewery_map <- get_map(location=c(lon = mean(c(min(pos$lon), max(pos$lon))), lat = mean(c(min(pos$lat), max(pos$lat)))), zoom=6, maptype="hybrid")
p <- ggmap(brewery_map) + geom_point(data=pos, aes(x=lon, y=lat), col="red", size=.8)
p
setwd("../../")
# set temporary working directory
tempwd <- ("data/wikipediaStatisticians")
dir.create(tempwd)
setwd(tempwd)
## step 1: inspect page
url <- "https://en.wikipedia.org/wiki/List_of_statisticians"
browseURL(url)
## step 1: inspect page
url <- "https://en.wikipedia.org/wiki/List_of_statisticians"
browseURL(url)
## step 2: retrieve links
html <- read_html(url)
anchors <- html_nodes(html, xpath = "//ul/li/a[1]")
links <- html_attr(anchors, "href")
links <- links[!is.na(links)]
links_iffer <-
seq_along(links) >=
seq_along(links)[str_detect(links, "Odd_Aalen")] &
seq_along(links) <=
seq_along(links)[str_detect(links, "George_Kingsley_Zipf")] &
str_detect(links, "/wiki/")
links_index <- seq_along(links)[links_iffer]
links <- links[links_iffer]
length(links)
links
##  step 3: extract names
names <- links %>% basename %>% sapply(., URLdecode)  %>% str_replace_all("_", " ") %>% str_replace_all(" \\(.*\\)", "") %>% str_trim
names
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- read_html(fname)
}
## step 5: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//p//a"), # note: only look for links in p sections; otherwise too many links collected
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
connections <- connections[!duplicated(connections),]
## step 6: visualize connections
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
## step 7: identify top nodes in data frame
nodesDF$id <- as.numeric(rownames(nodesDF)) - 1
connections_df <- merge(connections, nodesDF, by.x = "to", by.y = "id", all = TRUE)
to_count_df <- count(connections_df, name)
arrange(to_count_df, desc(n))
